<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<sub-flow name="post-onboardings-impl-subflow" doc:id="95e4ea42-d9ec-4f48-af25-6c9b6e4b6d97">
		<try doc:name="Try" doc:id="f22f016c-90f9-4054-94a8-563d60540fde" >
			<validation:is-true doc:name="validate size taxIdNumber" doc:id="6b2704a3-f485-47d8-8e82-79834cf9a0de" expression="#[sizeOf(vars.originalPayload.taxIdNumber) == 11]" message="TaxIdNumber must have size=11"/>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="e7aac0d9-fbed-428b-b46d-7a838827b8aa" >
					<set-variable value="400" doc:name="httpStatus" doc:id="3f65365c-f875-45e7-a7c9-cc4fa9f7ee15" variableName="httpStatus"/>
				</on-error-propagate>
			</error-handler>
		</try>
		<ee:transform doc:name="Request Config" doc:id="7f11ad1a-9724-4650-b3ed-487d963af6e1">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	"taxIdNumber": vars.originalPayload.taxIdNumber,
	"prospectDataExternalId": vars.originalPayload.prospectDataExternalId
}]]></ee:set-payload>
            </ee:message>
            <ee:variables>
                <ee:set-variable variableName="requestConfig"><![CDATA[%dw 2.0
output application/java

import * from dwl::HttpClient

var baseExternalService = "processApi.affluentManagement."
var operation = "createCustomerProductOnboarding."
var apiCallName = "postOnboarding.affluentManagement."
var securedProperty = false

var clientIdHeaderName = serviceProperty(baseExternalService,'auth.clientId.headerName')
var clientSecretHeaderName = serviceProperty(baseExternalService,'auth.clientSecret.headerName')



---
{
	method: callProperty(baseExternalService, operation, apiCallName, "method"),
	headers: (createAuthHeadersIfEnabled(baseExternalService, clientIdHeaderName, clientSecretHeaderName, securedProperty)),
	queryParams:  {},
	uriParams: {
		"tenantId": vars.tenantId
	},
	maxRetries: callProperty(baseExternalService, operation, apiCallName, "maxRetries"),
	millisBetweenRetries: callProperty(baseExternalService, operation, apiCallName, "millisBetweenRetries"),
	path: callProperty(baseExternalService, operation, apiCallName, "path")
}]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
		<flow-ref doc:name="affluentManagement-http-request" doc:id="c7077770-c971-4dc8-9e0f-22c8ede2e06c" name="affluentManagementPapi-http-request" />
		<ee:transform doc:name="httpStatus, response" doc:id="0860fa1c-c96d-42b4-afbe-0aba4c6e639d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
payload.httpResponse]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[payload.httpStatusCode]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</sub-flow>
	<sub-flow name="post-screening-requests-impl-subflow" doc:id="9b9091db-9637-487e-be99-b55f851610b3" >
		<logger level="DEBUG" doc:name="Log Payload" doc:id="bec1f227-552e-4c8a-889c-b5e2040f661b" message="#[payload]" />
		<ee:transform doc:name="Request Config" doc:id="9ac7dc02-c8cd-4ec9-8ebc-78503bc80d4f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	"validationCategoryCode": "SOURCE_DATA_VALIDATION"
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="requestConfig" ><![CDATA[%dw 2.0
output application/java

import * from dwl::HttpClient

var baseExternalService = "processApi.customerProductsOnboarding."
var operation = "screeningRequests."
var apiCallName = "postScreeningRequests.customerProductsOnboarding."
var securedProperty = false

var clientIdHeaderName = serviceProperty(baseExternalService,'auth.clientId.headerName')
var clientSecretHeaderName = serviceProperty(baseExternalService,'auth.clientSecret.headerName')



---
{
	method: callProperty(baseExternalService, operation, apiCallName, "method"),
	headers: (createAuthHeadersIfEnabled(baseExternalService, clientIdHeaderName, clientSecretHeaderName, securedProperty)),
	queryParams:  {},
	uriParams: {
		"tenantId": vars.tenantId,
		"id": vars.id
	},
	maxRetries: callProperty(baseExternalService, operation, apiCallName, "maxRetries"),
	millisBetweenRetries: callProperty(baseExternalService, operation, apiCallName, "millisBetweenRetries"),
	path: callProperty(baseExternalService, operation, apiCallName, "path")
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<flow-ref doc:name="customerProductsOnboardingPapi-http-request" doc:id="b14dff37-a5c7-4fe9-a9ce-16a14b29d30a" name="customerProductsOnboardingPapi-http-request" />
		<ee:transform doc:name="httpStatus, response" doc:id="58da1e5c-9714-4098-8857-e5aa2f1a7e14" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
payload.httpResponse]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[payload.httpStatusCode]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</sub-flow>
	<sub-flow name="post-ppe-screening-requests-impl-subflow" doc:id="1a7cc13b-d880-40fe-90df-6dbd2306149c" >
		<ee:transform doc:name="Request Config" doc:id="1795676b-2ecf-40d2-af29-47ee710c8c18" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	"validationCategoryCode": "PPE_DATA_VALIDATION"
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="requestConfig" ><![CDATA[%dw 2.0
output application/java

import * from dwl::HttpClient

var baseExternalService = "processApi.customerProductsOnboarding."
var operation = "screeningRequests."
var apiCallName = "postPPEScreeningRequests.customerProductsOnboarding."
var securedProperty = false

var clientIdHeaderName = serviceProperty(baseExternalService,'auth.clientId.headerName')
var clientSecretHeaderName = serviceProperty(baseExternalService,'auth.clientSecret.headerName')



---
{
	method: callProperty(baseExternalService, operation, apiCallName, "method"),
	headers: (createAuthHeadersIfEnabled(baseExternalService, clientIdHeaderName, clientSecretHeaderName, securedProperty)),
	queryParams:  {},
	uriParams: {
		"tenantId": vars.tenantId,
		"id": vars.id
	},
	maxRetries: callProperty(baseExternalService, operation, apiCallName, "maxRetries"),
	millisBetweenRetries: callProperty(baseExternalService, operation, apiCallName, "millisBetweenRetries"),
	path: callProperty(baseExternalService, operation, apiCallName, "path")
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<flow-ref doc:name="customerProductsOnboardingPapi-http-request" doc:id="2af5d51e-27ca-44b2-bf36-54791bc86af3" name="customerProductsOnboardingPapi-http-request" />
		<ee:transform doc:name="httpStatus, response" doc:id="fe5e7fc2-a4e2-4408-801b-38d6e24a4dbf" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
payload.httpResponse]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[payload.httpStatusCode]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</sub-flow>
	<sub-flow name="post-validate-signature-impl-subflow" doc:id="30438c7c-94f4-4625-a46e-9460b9d0c689" >
		<logger level="INFO" doc:name="Logger" doc:id="2912740e-a3a4-4323-9662-8141715f4d87" />
		<ee:transform doc:name="payload, RequestConfig" doc:id="a61a426f-43c3-49fd-a85d-25c86bcaf688" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.requestPayload]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="requestConfig" ><![CDATA[output application/java

import HttpConfigSecurePropertyFlagMapType from com::bradescofl::modules::common::Definitions
import createHttpConfig from com::bradescofl::modules::http::HttpClient

var sourceOperationName = "postValidateCustimerDigitalSignature"
var targetDeviceType = "processApi"
var targetServiceName = "affluentManagement"
var targetServiceOperationName = "validateSignature"

var securePropertiesFlagmap: HttpConfigSecurePropertyFlagMapType = {}
var additionalHeaders = {}
var queryParams = {}
var uriParams = {
	tenantId: vars.tenantId,
	id: vars.id
}

var propertyFetchingFun: (String) -> Any = Mule::p


---

createHttpConfig(
	propertyFetchingFun,
	sourceOperationName,
	targetDeviceType,
	targetServiceName,
	targetServiceOperationName,
	securePropertiesFlagmap,
	additionalHeaders,
	queryParams,
	uriParams
)]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<flow-ref doc:name="affluentManagementPapi-http-request" doc:id="0c7be1f4-2989-40e5-970d-f64e8d8502b2" name="affluentManagementPapi-http-request"/>
		<ee:transform doc:name="httpStatus, response" doc:id="bb8ea2e2-49c0-4740-9e69-8c6bec0f726b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload.httpResponse]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
payload.httpStatusCode]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</sub-flow>
</mule>
